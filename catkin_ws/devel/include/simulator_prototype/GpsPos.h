// Generated by gencpp from file simulator_prototype/GpsPos.msg
// DO NOT EDIT!


#ifndef SIMULATOR_PROTOTYPE_MESSAGE_GPSPOS_H
#define SIMULATOR_PROTOTYPE_MESSAGE_GPSPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator_prototype
{
template <class ContainerAllocator>
struct GpsPos_
{
  typedef GpsPos_<ContainerAllocator> Type;

  GpsPos_()
    : Time(0)
    , Latitude(0.0)
    , Longitude(0.0)
    , Altitude(0.0)
    , Heading(0.0)
    , X_vel(0.0)
    , Y_vel(0.0)
    , Z_vel(0.0)  {
    }
  GpsPos_(const ContainerAllocator& _alloc)
    : Time(0)
    , Latitude(0.0)
    , Longitude(0.0)
    , Altitude(0.0)
    , Heading(0.0)
    , X_vel(0.0)
    , Y_vel(0.0)
    , Z_vel(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _Time_type;
  _Time_type Time;

   typedef double _Latitude_type;
  _Latitude_type Latitude;

   typedef double _Longitude_type;
  _Longitude_type Longitude;

   typedef double _Altitude_type;
  _Altitude_type Altitude;

   typedef double _Heading_type;
  _Heading_type Heading;

   typedef double _X_vel_type;
  _X_vel_type X_vel;

   typedef double _Y_vel_type;
  _Y_vel_type Y_vel;

   typedef double _Z_vel_type;
  _Z_vel_type Z_vel;




  typedef boost::shared_ptr< ::simulator_prototype::GpsPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator_prototype::GpsPos_<ContainerAllocator> const> ConstPtr;

}; // struct GpsPos_

typedef ::simulator_prototype::GpsPos_<std::allocator<void> > GpsPos;

typedef boost::shared_ptr< ::simulator_prototype::GpsPos > GpsPosPtr;
typedef boost::shared_ptr< ::simulator_prototype::GpsPos const> GpsPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator_prototype::GpsPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator_prototype::GpsPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simulator_prototype

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'simulator_prototype': ['/home/d943/Dropbox/Master/catkin_ws/src/simulator_prototype/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simulator_prototype::GpsPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator_prototype::GpsPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator_prototype::GpsPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator_prototype::GpsPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator_prototype::GpsPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator_prototype::GpsPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator_prototype::GpsPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efb31c51c19a644c903697a51ea46779";
  }

  static const char* value(const ::simulator_prototype::GpsPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefb31c51c19a644cULL;
  static const uint64_t static_value2 = 0x903697a51ea46779ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator_prototype::GpsPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator_prototype/GpsPos";
  }

  static const char* value(const ::simulator_prototype::GpsPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator_prototype::GpsPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 Time\n\
float64 Latitude\n\
float64 Longitude\n\
float64 Altitude\n\
float64 Heading\n\
float64 X_vel\n\
float64 Y_vel\n\
float64 Z_vel\n\
";
  }

  static const char* value(const ::simulator_prototype::GpsPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator_prototype::GpsPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Time);
      stream.next(m.Latitude);
      stream.next(m.Longitude);
      stream.next(m.Altitude);
      stream.next(m.Heading);
      stream.next(m.X_vel);
      stream.next(m.Y_vel);
      stream.next(m.Z_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GpsPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator_prototype::GpsPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator_prototype::GpsPos_<ContainerAllocator>& v)
  {
    s << indent << "Time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Time);
    s << indent << "Latitude: ";
    Printer<double>::stream(s, indent + "  ", v.Latitude);
    s << indent << "Longitude: ";
    Printer<double>::stream(s, indent + "  ", v.Longitude);
    s << indent << "Altitude: ";
    Printer<double>::stream(s, indent + "  ", v.Altitude);
    s << indent << "Heading: ";
    Printer<double>::stream(s, indent + "  ", v.Heading);
    s << indent << "X_vel: ";
    Printer<double>::stream(s, indent + "  ", v.X_vel);
    s << indent << "Y_vel: ";
    Printer<double>::stream(s, indent + "  ", v.Y_vel);
    s << indent << "Z_vel: ";
    Printer<double>::stream(s, indent + "  ", v.Z_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_PROTOTYPE_MESSAGE_GPSPOS_H
