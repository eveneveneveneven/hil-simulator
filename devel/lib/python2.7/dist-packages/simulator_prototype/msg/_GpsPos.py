# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulator_prototype/GpsPos.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GpsPos(genpy.Message):
  _md5sum = "efb31c51c19a644c903697a51ea46779"
  _type = "simulator_prototype/GpsPos"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 Time
float64 Latitude
float64 Longitude
float64 Altitude
float64 Heading
float64 X_vel
float64 Y_vel
float64 Z_vel
"""
  __slots__ = ['Time','Latitude','Longitude','Altitude','Heading','X_vel','Y_vel','Z_vel']
  _slot_types = ['int64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Time,Latitude,Longitude,Altitude,Heading,X_vel,Y_vel,Z_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GpsPos, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Time is None:
        self.Time = 0
      if self.Latitude is None:
        self.Latitude = 0.
      if self.Longitude is None:
        self.Longitude = 0.
      if self.Altitude is None:
        self.Altitude = 0.
      if self.Heading is None:
        self.Heading = 0.
      if self.X_vel is None:
        self.X_vel = 0.
      if self.Y_vel is None:
        self.Y_vel = 0.
      if self.Z_vel is None:
        self.Z_vel = 0.
    else:
      self.Time = 0
      self.Latitude = 0.
      self.Longitude = 0.
      self.Altitude = 0.
      self.Heading = 0.
      self.X_vel = 0.
      self.Y_vel = 0.
      self.Z_vel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q7d().pack(_x.Time, _x.Latitude, _x.Longitude, _x.Altitude, _x.Heading, _x.X_vel, _x.Y_vel, _x.Z_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.Time, _x.Latitude, _x.Longitude, _x.Altitude, _x.Heading, _x.X_vel, _x.Y_vel, _x.Z_vel,) = _get_struct_q7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q7d().pack(_x.Time, _x.Latitude, _x.Longitude, _x.Altitude, _x.Heading, _x.X_vel, _x.Y_vel, _x.Z_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.Time, _x.Latitude, _x.Longitude, _x.Altitude, _x.Heading, _x.X_vel, _x.Y_vel, _x.Z_vel,) = _get_struct_q7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q7d = None
def _get_struct_q7d():
    global _struct_q7d
    if _struct_q7d is None:
        _struct_q7d = struct.Struct("<q7d")
    return _struct_q7d
